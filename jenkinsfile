pipeline {
    agent any
    environment {
        FRONTEND_DIR = 'frontend'
        BACKEND_DIR = 'backend'
        ARTIFACTS_DIR = 'artifacts'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            parallel {
                stage('Frontend (Yarn)') {
                    steps {
                        dir(env.FRONTEND_DIR) {
                            sh 'yarn install --frozen-lockfile'
                            sh 'yarn build'
                            stash name: 'frontend-dist', includes: 'dist/**'
                        }
                    }
                }
                stage('Backend (Gradle)') {
                    steps {
                        dir(env.BACKEND_DIR) {
                            sh './gradlew clean build'
                            stash name: 'backend-jar', includes: 'build/libs/*.jar'
                        }
                    }
                }
            }
        }
        
        stage('Test') {
            parallel {
                stage('Frontend Tests') {
                    steps {
                        dir(env.FRONTEND_DIR) {
                            sh 'yarn test --coverage'
                        }
                    }
                }
                stage('Backend Tests') {
                    steps {
                        dir(env.BACKEND_DIR) {
                            sh './gradlew test'
                        }
                    }
                }
            }
        }
        
        stage('Artifacts') {
            steps {
                unstash 'frontend-dist'
                unstash 'backend-jar'
                archiveArtifacts artifacts: '**/dist/**, **/build/libs/*.jar', fingerprint: true
            }
        }
        
        stage('Deploy') {
            when {
                branch 'main' // or 'production'
            }
            steps {
                script {
                    // Example: Deploy backend to AWS EBS
                    sh """
                        cd ${env.BACKEND_DIR}
                        ./gradlew deployToAws
                    """
                    
                    // Example: Deploy frontend to S3
                    withAWS(region: 'us-east-1') {
                        s3Upload(
                            bucket: 'my-frontend-bucket',
                            path: 'prod/',
                            source: "${env.FRONTEND_DIR}/dist"
                        )
                    }
                }
            }
        }
    }
    post {
        always {
            junit allowEmptyResults: true,
                testResults: "${env.BACKEND_DIR}/build/test-results/**/*.xml"
            cobertura autoUpdateHealth: false,
                autoUpdateStability: false,
                coberturaReportFile: "${env.FRONTEND_DIR}/coverage/**/cobertura-coverage.xml"
            cleanWs()
        }
        failure {
            slackSend channel: '#build-failures',
                message: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
        }
    }
}
